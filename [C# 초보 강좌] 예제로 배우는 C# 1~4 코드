using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.Drawing;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Windows.Forms;

namespace HelloCSharpWin
{
    public partial class Calculator : Form
    {
        public Calculator()
        {
            InitializeComponent();
        }

        public bool HasValue()
        {
            return true;
        }

        private void HelloLabel_Click(object sender, EventArgs e)
        {
            int number1 = 1;
            int number2 = 2;
            if (HasValue())
            {
                // 1
            }
            else // if 조건문이 참이 아니라면 else로 내려와 2가 실행됨
            // else if (조건식) : if 조건문이 참이라면, else if 도 거짓이라면 3이 실행 됨 (else if는 무한으로 붙을 수 있음)
            {
                // 2
            }
            // 3


            // 데이터타입은 작은 공간 큰 공간으로 나뉘어짐 (지하철 물품보관소 떠올리기)
            // int : 정수, string : 문자, bool : true, false 두개의 값만 가질 수 있음

            int number1 = 1;
            int number2 = 2;

            int sum = number1 + number2;

            // 사칙연산 : +, -, *, /

            HelloLabel.Text = sum.ToString();
        }

        private void Calculator_Load(object sender, EventArgs e)
        {

        }

        private void textBox2_TextChanged(object sender, EventArgs e)
        {

        }

        private void SumNumbers_Click(object sender, EventArgs e)
        {
            int number1 = 0;
            int number2 = 0;

            if (string.IsNullOrWhiteSpace(sum1.Text))
            {
                MessageBox.Show("Sum1에 숫자를 입력해주세요.");
                sum1.Focus();
                return; // 밑에 코드를 실행 시키지 않고 function에서 빠져나오고 싶을 때 쓰면 됨
            }

            if (int.TryParse(sum1.Text, out number1) == false)
            {
                MessageBox.Show("Sum1에 문자가 들어왔습니다. 숫자를 입력해주세요.");
                sum1.SelectAll();
                sum1.Focus();
                return;
            }

            if (string.IsNullOrWhiteSpace(sum2.Text))
            {
                MessageBox.Show("Sum2에 숫자를 입력해주세요.");
                sum1.Focus();
                return;
            }
            if (int.TryParse(sum2.Text, out number2) == false)
            {
                MessageBox.Show("Sum2에 문자가 들어왔습니다. 숫자를 입력해주세요.");
                sum2.SelectAll();
                sum2.Focus();
                return;
            }



            number1 = Convert.ToInt32(sum1.Text); // sum1을 int(정수형)으로 받아온다
            number2 = Convert.ToInt32(sum2.Text);

            int sum = Add(number1, number2);
            sumResult.Text = sum.ToString();

            // function (어떤 기능을 하게 만드는 블럭) = 함수 = method

            // 밥통 : 쌀을 씻어서 밥통에 넣고 취사버튼을 누른다 > function, 취사버튼 누르는 행위 > function 호출 , 밥 > output 9결과


        }
        // steamedrice Cook(rice, water)


        public int Add(int number1, int number2)
        {
            // float 실수형 데이터타입

            int sum = number1 + number2;
            return sum; // sum을 반환해준다
        }

        public float Add(float number1, float number2)
        {
            float sum = number1 + number2;
            return sum;
        }

        //public void Flush(Number1);
        //public void Flush(Number2);
        //public void Flush(Number1, Number2);
        //public void Flush();
        // 같은 이름의 함수가 여러개 선언 될 수 있지만 그럴려면 매개변수 타입, 갯수 등이 달라야 한다. 
        // 매개변수가 다르면 같은 이름의 함수가 여러개 있을 수 있다
        // 같은 이름의 함수가 다른 매개변수를 가지고 여러개 정의 되는 것을 함수의 오버로딩이라고 한다.

        public int Sub(int number1, int number2)
        {
            int sub = number1 - number2;
            return sub;

        }
         
    }
}
